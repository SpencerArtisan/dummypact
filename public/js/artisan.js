// Generated by CoffeeScript 1.3.3
(function() {
  var CallModel, MonitorModel, model;

  MonitorModel = (function() {

    function MonitorModel() {
      this.calls = ko.observableArray([]);
      this.refresh();
    }

    MonitorModel.prototype.refresh = function() {
      var _this = this;
      return $.getJSON("/calls", function(all_calls) {
        var mapped_calls;
        mapped_calls = $.map(all_calls, function(call) {
          return new CallModel(call);
        });
        return _this.calls(mapped_calls);
      });
    };

    return MonitorModel;

  })();

  CallModel = (function() {

    function CallModel(data) {
      this.data = data;
      this.index = ko.observable(data.index);
      this.status = ko.observable(data.status);
      this.type = ko.observable(data.type);
      this.duration = ko.observable(data.duration_formatted);
      this.cumulative = ko.observable(data.cumulative_duration);
      this.input = ko.observable(data.input);
      this.output = ko.observable(data.output);
    }

    CallModel.prototype.display = function() {
      if (this.status() === 'Failed') {
        return 'error';
      }
      if (this.status() === 'Succeeded') {
        return 'success';
      }
      if (this.status() === 'In progress') {
        return 'warning';
      }
      return 'info';
    };

    CallModel.prototype.viewInput = function() {
      var data;
      data = JSON.parse(this.input());
      return this.viewData("" + (this.index()) + ". " + (this.type()) + " - Input data", data);
    };

    CallModel.prototype.viewOutput = function() {
      var data;
      data = {
        'result': this.output()
      };
      return this.viewData("" + (this.index()) + ". " + (this.type()) + " - Output data", data);
    };

    CallModel.prototype.viewData = function(header, data) {
      var _this = this;
      $('#modal-data').empty();
      $('#data-header').text(header);
      $.each(data, function(k, v) {
        $('#modal-data').append("<h3>" + k + "</h3>");
        if (v.substring(0, 1) === "<") {
          v = vkbeautify.xml(v);
        }
        v = _this.textToHtml(v);
        return $('#modal-data').append("<pre>" + v + "</pre>");
      });
      return $('#data-modal').modal();
    };

    CallModel.prototype.textToHtml = function(str) {
      var pr_amp, pr_gt, pr_lt, pr_quot;
      pr_amp = /&/g;
      pr_lt = /</g;
      pr_gt = />/g;
      pr_quot = /\"/g;
      return str.replace(pr_amp, '&amp;').replace(pr_lt, '&lt;').replace(pr_gt, '&gt;');
    };

    return CallModel;

  })();

  model = new MonitorModel();

  ko.applyBindings(model);

  setInterval(function() {
    return model.refresh();
  }, 800);

}).call(this);
